1. 주요 클래스/인터페이스/패키지의 대략적 기능


- SavedText : 하나의 텍스트의 단위로서의 자료구조인 추상 클래스이다.
- ModelUnit : 하나의 창의 단위로서의 자료구조의 인테페이스이다. 하나의 창은 두 개의 텍스트 저장 구조를 가지며, 그 두 텍스트의 비교된 형태에 대한 정보 역시 가진다.
- Model : 여러 개의 창을 관리하는 단위로서의 자료구조의 인터페이스이다. 하나의 이 단위는 여러 개의 창을 열고 처리하고 닫을 수 있다. 각각의 창을 그 창 고유의 식별자로 구분한다.
- LCSsupport : 두 개의 SavedText를 비교하기 위하여 만들어진 패키지이다. 이 패키지의 모든 클래스는 비교를 보조하기 위한 기능을 가진다.



2. 각 클래스/인터페이스의 메소드의 개요



2.1. SavedText 클래스


2.1.1. 입출력 관련

- abstract protected void ReadFromOuter(String filepath) throws IOException
경로 filepath의 파일을 읽는다.
- abstract protected void WriteFromOuter(String filepath) throws IOException
경로 filepath에 파일을 쓴다.
- void ReadFrom(String filepath) throws IOException
경로 filepath의 파일을 읽는다. ReadFromOuter 메소드를 이용하며, 매개변수로 받은 filepath를 저장한다.
- void WriteFrom(String filepath) throws IOException
경로 filepath에 파일을 쓴다. WriteFromOuter 메소드를 이용한다.
- void WriteFrom() throws IOException
저장된 filepath에 파일을 쓴다. WriteFromOuter 메소드를 이용한다.
- String filepath()
저장된 filepath를 반환한다.

2.1.2. 자료 접근 관련

- int NumOfLine()
저장된 텍스트의 라인 수를 반환한다.
- String Read(int i) throws IndexOutOfBoundsException
저장된 텍스트의 i번째 라인을 읽는다.
- void Write(int i, String s) throws IndexOutOfBoundsException
저장된 텍스트의 i번째 라인을 s로 덮어씌운다.
- ArrayList<String> ReadAll()
저장된 텍스트 전체를 읽는다.
- void WriteAll(ArrayList<String> s)
저장된 텍스트 전체를 쓴다.

2.1.3. 처리 관련

- ArrayList<Integer>[][] LCSMethod(SavedText another) throws NullPointerException
자신과 another를 비교하여, compare된 결과 정보를 저장한 ArrayList<Integer>[][2] 값을 반환한다.
ArrayList<Integer>[][2]의 형식은 추후에 서술한다.


2.2. ModelUnit 인터페이스


2.2.1. 입출력 관련

- public void open(String filepath, int i) throws IOException, IndexOutOfBoundsException
경로 filepath의 파일을 읽어 i번째 텍스트에 저장한다. (i = 0 or 1)
- public void save(String filepath, int i) throws IOException, IndexOutOfBoundsException
경로 filepath에 i번째 텍스트를 파일로 저장한다. (i = 0 or 1)
- public void save(int i) throws IOException
i번째 텍스트를, 그 텍스트가 기억하는 filepath에 파일로 저장한다. (i = 0 or 1)
- public String filepath(int i)
i번째 텍스트가 기억하는 filepath를 받아온다. (i = 0 or 1)

2.2.2. 자료 접근 관련

- public ArrayList<String> textReceive(int i) throws IndexOutOfBoundsException
비교되지 않은 i번째 텍스트 전체를 받아온다. (i = 0 or 1)
- public void textSend(int i, ArrayList<String> s) throws IndexOutOfBoundsException
비교되지 않은 i번째 텍스트를 s로 대체한다. (i = 0 or 1)
- public ArrayList<String> getArrangedText(int i) throws IndexOutOfBoundsException
비교되어 알맞게 개행이 들어간 i번째 텍스트 전체를 받아온다. (i = 0 or 1)
- public ArrayList<Integer> getArrangedGroup() throws IndexOutOfBoundsException
비교되어 알맞게 개행이 들어간 텍스트의 각 줄의 그룹 번호를 받아온다.
returnVaule.get(i)=j일 때, 정리된 텍스트의 i번째 줄은 j번째의 그룹에 속한다. j가 홀수일 경우 서로 맞지 않는 그룹이며, j가 짝수일 경우 서로 일치하는 그룹이다.
- public ArrayList<Integer> getArrangedGroupSpace() throws IndexOutOfBoundsException
비교되어 알맞게 개행이 들어간 텍스트의 각 그룹의 줄 수를 받아온다.
returnVaule.get(i)=j일 때, 정리된 텍스트의 i번째 그룹은 j개의 줄을 포함한다.

2.2.3. 처리 관련

- public void mergeBylineNum(int lineNum, boolean direction) throws IndexOutOfBoundsException, MergeLineIllegalException
비교되어 알맞게 개행이 들어간 텍스트의 lineNum번째 줄이 포함된 그룹을 두 텍스트 간에 병합한다.
direction에 따라서, True일 경우 0->1, False일 경우 1->0으로 텍스트가 복사된다.
- public void mergeByGroupNum(int groupNum, boolean direction) throws MergeLineIllegalException
비교되어 알맞게 개행이 들어간 텍스트의 groupNum번째 그룹을 두 텍스트 간에 병합한다.
direction에 따라서, True일 경우 0->1, False일 경우 1->0으로 텍스트가 복사된다.


2.3. Model 인터페이스


2.3.1. 창 생성/소멸 관련

- void newModel(int tabNum) throws IllegalArgumentException
ModelUnit 모델 유닛을 하나 만든다. 각각의 모델 유닛은 그 유닛을 찾을 수 있도록 식별자를 가지며, 새로 만들어지는 창의 식별자를 tabNum으로 한다.
- int newModel();
모델 유닛을 하나 만든다. 그 유닛의 식별자는 자동으로 지정되어 반환된다.
- void closeModel(int tabNum) throws IllegalAccessException;
식별자 tabNum을 가지는 모델 유닛을 닫는다.

2.3.2. 자료 접근 관련
- boolean isOpen(int tabNum, int i) throws IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트가 존재하는지를 파악한다.
- ArrayList<String> getText(int tabNum, int i) throws IndexOutOfBoundsException, IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트(i=0 or 1) 전체를 가져온다.
- ArrayList<String> getArrangedText(int tabNum, int i) throws IndexOutOfBoundsException, IllegalAccessException;
식별자 tabNum을 가지는 창의 알맞게 비교되어 개행이 들어간 i번째 텍스트(i=0 or 1) 전체를 가져온다.
- ArrayList<Integer> getArrangedGroupNum(int tabNum) throws IndexOutOfBoundsException, IllegalAccessException;
식별자 tabNum을 가지는 창의 비교되어 알맞게 개행이 들어간 텍스트의 각 줄의 그룹 번호를 받아온다.
- ArrayList<Integer> getArrangedGroupSpace(int tabNum) throws IllegalAccessException;
식별자 tabNum을 가지는 창의 비교되어 알맞게 개행이 들어간 텍스트의 각 그룹이 포함하는 줄 수를 받아온다.
- void setText(int tabNum, ArrayList<String> text, int i) throws IndexOutOfBoundsException, IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트(i=0 or 1) 전체를 text로 설정한다.

2.3.3. 파일 입출력 관련

- void readTextOuter(int tabNum, String filepath, int i) throws IndexOutOfBoundsException, IOException, IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트(i=0 or 1) 전체를 filepath에서 가져온다.
- void writeTextOuter(int tabNum, String filepath, int i) throws IndexOutOfBoundsException, IOException, IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트(i=0 or 1) 전체를 filepath에 쓴다.
- void writeTextOuter(int tabNum, int i) throws IndexOutOfBoundsException, IOException, IllegalAccessException;
식별자 tabNum을 가지는 창의 i번째 텍스트(i=0 or 1) 전체를 그 텍스트가 기억하는 filepath에 쓴다.

2.3.4. 처리 관련

- void mergeByLine(int tabNum, int Index, boolean direction) throws IndexOutOfBoundsException, IllegalAccessException, MergeLineIllegalException;
식별자 tabNum을 가지는 창의 비교되어 알맞게 개행이 들어간 텍스트의 i번째 텍스트의 lndex번째 줄이 포함된 그룹을 두 텍스트 간에 병합한다.
- void mergeByGroup(int tabNum, int groupNum, boolean direction) throws IndexOutOfBoundsException, IllegalAccessException, MergeLineIllegalException;
식별자 tabNum을 가지는 창의 비교되어 알맞게 개행이 들어간 텍스트의 i번째 텍스트의 groupNum번째 그룹을 두 텍스트 간에 병합한다.



3. 비교와 병합 처리



3.1. 추가적인 비교 정보에 대하여


3.1.1. 추가적인 비교 정보인 ArrayList<Integer>[][2]의 의미

하나의 모델 유닛은 정리되지 않은 두 텍스트 정보를 제외하고도, 비교되어 알맞게 개행이 들어간 텍스트의 정보와 ArrayList<Integer>[][2] 정보를 가진다.
이 때 ArrayList<Integer>[][2]가 무엇인지를 살펴보자
LCSSupport 인터페이스는 ArrayList<Integer>[2]가 어떠한 정보를 의미하는지에 대한 정보를 저장한다.
LCSClassEnum 열거형은 LCSSupport 인터페이스를 구현한 각 클래스의 이름을 열거한 열거형이다.
ArrayList<Integer>[i][2]는, LCSClassEnum 열거형의 i번째 인터페이스가 어떤 정보를 저장하는가에 따라서 그 의미가 정해진다.
ArrayList<Integer>[][2]는 그 자신만으로도 정리되지 않은 두 텍스트를 적절히 정리할 수 있도록 되어 있다.

3.1.2. ArrayList<Integer>[][2] 작동 방식

3.2.2.1. ArrayList<Integer>[][2] 생성 방식
LCSSupport 인터페이스를 구현한 클래스의 각각의 ArrayList<Integer>[2] 정보는 두 텍스트가 비교될 때 생성된다.
LCSGrouping 클래스는 SavedText의 LCSMethod(SavedText another) 메소드 실행 도중, 백트래킹 행렬을 받아,
그 행렬에서 실제로 백트래킹해가면서 LCSClassEnum 열거형에 열거된 ArrayList<Integer>[2] 행렬을 만든다.
정확히 말하면, 백트래킹하면서, 백트래킹 시작, 그룹 바뀜, 백트래킹으로 이동함, 백트래킹 끝 이 네 가지의 상황을 인지하여, 인지될 때마다 각각
LCSSupport 인터페이스에 정의된 groupStartingAction, groupTrackingAction, groupChangingAction, groupEndingAction을 수행한다.
3.1.2.2. ArrayList<Integer>[][2] 병합 방식
LCSSupport 인터페이스에 정의된 whenMerge 메소드는, ArrayList<Integer>[][2]과 병합되는 그룹 번호를 받아
병합 후에 바뀔 새로운 ArrayList<Integer>[2]를 반환한다.
그 결과들을 모아 새로운 ArrayList<Integer>[][2]를 만든다.


3.2. 작동 방식


3.2.1. 비교 방식

a. 백트래킹 행렬을 구한다.
b. 그 행렬으로 ArrayList<Integer>[][2] 정보를 얻는다.
c. ArrayList<Integer>[][2]에서 정리된 텍스트의 정보를 얻는다.

3.2.2. 병합 방식

a. 가지고 있는 정보로 정리되지 않은 텍스트 정보를 갱신한다.
b. 가지고 있는 정보로 정리된 텍스트의 정보를 갱신한다.
c. 가지고 있는 정보로 ArrayList<Integer>[][2] 정보를 갱신한다.